schema {
  query: QueryType
  mutation: MutationType
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""Mutation types"""
type MutationType {
  """todos Creation"""
  TodosCreation(input: TodosCreationInput!): TodosCreationPayload

  """todos Update"""
  TodosUpdate(input: TodosUpdateInput!): TodosUpdatePayload

  """Create new user"""
  UserCreation(input: UserCreationInput!): UserCreationPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Graphql type for queries"""
type QueryType {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  myTodos(first: Int, last: Int, before: String, after: String): TodoConnection
}

"""A connection to a list of items."""
type TodoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]
}

"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge"""
  node: TodosType

  """A cursor for use in pagination"""
  cursor: String!
}

input TodosCreationInput {
  content: String!
  clientMutationId: String
}

type TodosCreationPayload {
  todo: TodoEdge
  clientMutationId: String
}

"""Todos type"""
type TodosType implements Node {
  """The ID of an object"""
  id: ID!
  content: String
  createdAt: String
  updatedAt: String
}

input TodosUpdateInput {
  content: String!
  id: String!
  clientMutationId: String
}

type TodosUpdatePayload {
  todo: TodoEdge
  clientMutationId: String
}

input UserCreationInput {
  identifier: String!
  clientMutationId: String
}

type UserCreationPayload {
  user: UserType!
  clientMutationId: String
}

"""User type"""
type UserType {
  identifier: String
  todos(after: String, first: Int, before: String, last: Int): TodoConnection
  createdAt: String
  updatedAt: String
}

